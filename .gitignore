# Byte-compiled / optimized / DLL files
__pycache__/
<<<<<<< HEAD
*.py[cod]
=======
*.py[codz]
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
<<<<<<< HEAD
*.py,cover
=======
*.py.cover
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
<<<<<<< HEAD
# Pipfile.lock
=======
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
<<<<<<< HEAD
# poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm.lock
=======
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
<<<<<<< HEAD
=======
.envrc
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
<<<<<<< HEAD
Dataset_creation/.env
Evals/.env

# Virtual environment folders in any subdirectory
**/venv/
**/.venv/
**/env/
**/ENV/
**/virtualenv/
**/.virtualenv/
**/venv.bak/
**/env.bak/
=======
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
<<<<<<< HEAD
#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can
#  be added at the following URL: https://www.templatetypes.org/templatetype/jetbrains+all
#  https://www.templatetypes.org/templatetype/jetbrains+python

.idea/

# VS Code
.vscode/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Temporary files
*.tmp
*.temp
*.bak
*.swp
*.swo
*~

# Logs
*.log
logs/
log/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release/

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production
.env.local
.env.staging
.env.development

# Environment files in any subdirectory
**/.env
**/.env.*
**/.env.local
**/.env.production
**/.env.staging
**/.env.development
**/.env.test

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# MacOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.directory
.Trash-*

# API Keys and sensitive data
.env
.env.local
.env.production
.env.staging
.env.development
.env.test

# OpenAI API key files
openai_api_key.txt
api_key.txt
secrets.json

# AWS credentials
.aws/
credentials
config

# Google Cloud
gcloud/
.google/

# Azure
.azure/

# Database files
*.db
*.sqlite
*.sqlite3

# Redis dumps
dump.rdb

# Elasticsearch
elasticsearch/

# Application specific
# LangChain
langchain_cache/
.cache/

# Temporary result files
results.json
evaluation_results.json
temp_*.json

# Model files and checkpoints
*.pkl
*.h5
*.pb
*.onnx
*.joblib
checkpoints/
models/

# Large data files
*.csv
*.xlsx
*.xls
*.parquet
*.feather
data/
datasets/

# Generated documentation
docs/_build/
docs/build/

# Test outputs
test-results/
test_output/
*.xml
junit-*.xml

# CI/CD
.github/workflows/*.yml.backup
.github/workflows/*.yaml.backup

# Docker
.dockerignore
Dockerfile.*
docker-compose.override.yml

# Kubernetes
*.yaml.backup
*.yml.backup

# Terraform
.terraform/
*.tfstate
*.tfstate.backup
*.tfvars

# Ansible
*.retry

# Vagrant
.vagrant/

# Packer
*.pkrvars.hcl

# Local development
local_settings.py
local_config.py
development.py

# Editor backups
*~
*.bak
*.backup
*.orig
*.rej
=======
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
>>>>>>> df45c27111e247c7ad3f29a5ad5802420d80a672
